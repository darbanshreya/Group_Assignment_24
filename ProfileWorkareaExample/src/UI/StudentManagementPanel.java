/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import Model.Course;
import Model.Faculty;
import Model.GradeCalculator;
import Model.Student;
import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ravin
 */
public class StudentManagementPanel extends javax.swing.JPanel {
private Faculty currentFaculty;
private Course selectedCourse;
private DefaultTableModel tableModel;
    /**
     * Creates new form StudentManagemnetPanel
     */
    public StudentManagementPanel(Faculty faculty) {
        this.currentFaculty = faculty;
        initComponents();
         setupTable();
        loadCourses();
    }
     private void setupTable() {
        tableModel = new DefaultTableModel(
            new String[]{"Student ID", "Name", "Email", "Grade", "Percentage"}, 0
        ) {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Make table read-only
            }
        };
        tblStudents.setModel(tableModel);
    }
      private void loadCourses() {
        cmbCourses.removeAllItems();
        for (Course course : currentFaculty.getAssignedCourses()) {
            cmbCourses.addItem(course.getCourseId() + " - " + course.getTitle());
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lblTitle = new javax.swing.JLabel();
        lblSelectCourse = new javax.swing.JLabel();
        cmbCourses = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblStudents = new javax.swing.JTable();
        btnViewProgress = new javax.swing.JButton();
        btnViewTranscipt = new javax.swing.JButton();
        btnRankStudents = new javax.swing.JButton();
        lblClassGPA = new javax.swing.JLabel();

        lblTitle.setText("Student Management");

        lblSelectCourse.setText("Select Course");

        cmbCourses.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cmbCourses.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbCoursesActionPerformed(evt);
            }
        });

        tblStudents.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Student ID", "Name", "Email", "Grade", "Percentage"
            }
        ));
        jScrollPane1.setViewportView(tblStudents);

        btnViewProgress.setText("View Progress");
        btnViewProgress.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewProgressActionPerformed(evt);
            }
        });

        btnViewTranscipt.setText("ViewTranscript");
        btnViewTranscipt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewTransciptActionPerformed(evt);
            }
        });

        btnRankStudents.setText("Rank Students");
        btnRankStudents.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankStudentsActionPerformed(evt);
            }
        });

        lblClassGPA.setText("Class GPA : 0.00");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(33, 33, 33)
                .addComponent(btnViewProgress)
                .addGap(30, 30, 30)
                .addComponent(btnViewTranscipt)
                .addGap(18, 18, 18)
                .addComponent(btnRankStudents)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(lblClassGPA)
                .addGap(21, 21, 21))
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(46, 46, 46)
                        .addComponent(lblSelectCourse)
                        .addGap(80, 80, 80)
                        .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(175, 175, 175)
                        .addComponent(lblTitle))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(75, 75, 75)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(24, 24, 24)
                .addComponent(lblTitle)
                .addGap(34, 34, 34)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblSelectCourse)
                    .addComponent(cmbCourses, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 66, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnViewProgress)
                    .addComponent(btnViewTranscipt)
                    .addComponent(btnRankStudents)
                    .addComponent(lblClassGPA))
                .addGap(50, 50, 50))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnViewProgressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewProgressActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a student", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    String studentId = (String) tableModel.getValueAt(selectedRow, 0);
    Student student = selectedCourse.getEnrolledStudents().stream()
        .filter(s -> s.getStudentId().equals(studentId))
        .findFirst().orElse(null);
    
    if (student != null) {
        double percentage = GradeCalculator.calculateStudentTotalPercentage(student, selectedCourse);
        String message = String.format("Student: %s\nTotal Percentage: %.2f%%\nLetter Grade: %s",
            student.getName(), percentage, GradeCalculator.calculateLetterGrade(percentage));
        JOptionPane.showMessageDialog(this, message, "Student Progress", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnViewProgressActionPerformed

    private void btnViewTransciptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewTransciptActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblStudents.getSelectedRow();
    if (selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a student", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    String studentId = (String) tableModel.getValueAt(selectedRow, 0);
    Student student = selectedCourse.getEnrolledStudents().stream()
        .filter(s -> s.getStudentId().equals(studentId))
        .findFirst().orElse(null);
    
    if (student != null) {
        StringBuilder transcript = new StringBuilder();
        transcript.append("Student: ").append(student.getName()).append("\n");
        transcript.append("Student ID: ").append(student.getStudentId()).append("\n\n");
        transcript.append("Courses:\n");
        
        for (Map.Entry<String, String> entry : student.getCourseGrades().entrySet()) {
            transcript.append(entry.getKey()).append(": ").append(entry.getValue()).append("\n");
        }
        
        JOptionPane.showMessageDialog(this, transcript.toString(), "Transcript", JOptionPane.INFORMATION_MESSAGE);
    }
    }//GEN-LAST:event_btnViewTransciptActionPerformed

    private void btnRankStudentsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankStudentsActionPerformed
        // TODO add your handling code here:
           if (selectedCourse == null || selectedCourse.getEnrolledStudents().isEmpty()) {
        JOptionPane.showMessageDialog(this, "No students to rank", "Error", JOptionPane.ERROR_MESSAGE);
        return;
    }
    
    List<Student> students = new ArrayList<>(selectedCourse.getEnrolledStudents());
    students.sort((s1, s2) -> {
        double p1 = GradeCalculator.calculateStudentTotalPercentage(s1, selectedCourse);
        double p2 = GradeCalculator.calculateStudentTotalPercentage(s2, selectedCourse);
        return Double.compare(p2, p1); // Descending order
    });
    
    tableModel.setRowCount(0);
    int rank = 1;
    for (Student student : students) {
        double percentage = GradeCalculator.calculateStudentTotalPercentage(student, selectedCourse);
        String grade = student.getGradeForCourse(selectedCourse.getCourseId());
        
        tableModel.addRow(new Object[]{
            rank++ + ". " + student.getStudentId(),
            student.getName(),
            student.getEmail(),
            grade,
            String.format("%.2f%%", percentage)
        });
    }
    }//GEN-LAST:event_btnRankStudentsActionPerformed

    private void cmbCoursesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbCoursesActionPerformed
       int index = cmbCourses.getSelectedIndex();
    if (index >= 0) {
        selectedCourse = currentFaculty.getAssignedCourses().get(index);
        loadStudentTable();
        updateClassGPA();
    }
    }
    private void loadStudentTable() {
    tableModel = (DefaultTableModel) tblStudents.getModel();
    tableModel.setRowCount(0);
    
    if (selectedCourse != null) {
        for (Student student : selectedCourse.getEnrolledStudents()) {
            double percentage = GradeCalculator.calculateStudentTotalPercentage(student, selectedCourse);
            String grade = student.getGradeForCourse(selectedCourse.getCourseId());
     tableModel.addRow(new Object[]{
                student.getStudentId(),
                student.getName(),
                student.getEmail(),
                grade,
                String.format("%.2f%%", percentage)
            });
        }
    }
}
    private void updateClassGPA() {
    if (selectedCourse != null && !selectedCourse.getEnrolledStudents().isEmpty()) {
        double avgPercentage = GradeCalculator.calculateClassAverageGrade(selectedCourse);
        double avgGPA = avgPercentage / 25.0; // Rough conversion
        lblClassGPA.setText(String.format("Class GPA: %.2f", avgGPA));
    } else {
        lblClassGPA.setText("Class GPA: N/A");
    }

    }//GEN-LAST:event_cmbCoursesActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRankStudents;
    private javax.swing.JButton btnViewProgress;
    private javax.swing.JButton btnViewTranscipt;
    private javax.swing.JComboBox<String> cmbCourses;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblClassGPA;
    private javax.swing.JLabel lblSelectCourse;
    private javax.swing.JLabel lblTitle;
    private javax.swing.JTable tblStudents;
    // End of variables declaration//GEN-END:variables
}
